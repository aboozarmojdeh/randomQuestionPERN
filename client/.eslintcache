[{"C:\\randomQuestionPERN\\client\\src\\index.js":"1","C:\\randomQuestionPERN\\client\\src\\reportWebVitals.js":"2","C:\\randomQuestionPERN\\client\\src\\App.js":"3","C:\\randomQuestionPERN\\client\\src\\components\\QuestionForm.js":"4","C:\\randomQuestionPERN\\client\\src\\apis\\AnswerQuestion.js":"5","C:\\randomQuestionPERN\\client\\src\\components\\ShowForm.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":251,"mtime":1609451849458,"results":"10","hashOfConfig":"8"},{"size":3276,"mtime":1609779601328,"results":"11","hashOfConfig":"8"},{"size":118,"mtime":1609436002626,"results":"12","hashOfConfig":"8"},{"size":836,"mtime":1609449948928,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16wlfyn",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":5,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\randomQuestionPERN\\client\\src\\index.js",[],["29","30"],"C:\\randomQuestionPERN\\client\\src\\reportWebVitals.js",[],"C:\\randomQuestionPERN\\client\\src\\App.js",[],"C:\\randomQuestionPERN\\client\\src\\components\\QuestionForm.js",["31","32"],"import React, { useState } from \"react\";\r\nimport AnswerQuestion from \"../apis/AnswerQuestion\";\r\n// import ShowForm from './ShowForm';\r\nconst QuestionForm = () => {\r\n  // const { id } = useParams();\r\n  // let history=useHistory();\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [labelSelected, SetLabelSelected] = useState(\"\");\r\n  const [idSelected, SetIdSelected] = useState(\"\");\r\n\r\n  const [isShowForm, setIsShowForm] = useState(false);\r\n  const [disableAskMe,setDisableAskMe]=useState(false);\r\n  const [askMeAlert,setAskMeAlert]=useState('Ask Me');\r\n\r\n  // useEffect(() => {\r\n\r\n  // }, []);\r\n\r\n  const nameChange = (event) => {\r\n    setAnswer(event.target.value);\r\n    console.log(event.target.value);\r\n  };\r\n\r\n  const handleSubmitAnswer = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const updateQuestion = await AnswerQuestion.put(`/${idSelected}`, {\r\n      question_text: labelSelected,\r\n      answer_text: answer,\r\n      is_answered: true,\r\n    });\r\n    // history.push('/dashboard');\r\n    setAnswer(\"\");\r\n    setIsShowForm(false);\r\n  };\r\n\r\n  const getRandomIntExclusive = (min, max) => {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive\r\n  };\r\n\r\n  const handleAskMe = () => {\r\n    const questionGrabber = async () => {\r\n      const response = await AnswerQuestion.get(\"/unanswered\");\r\n      //   const questions = await response.json();\r\n      if (response.data.length) {\r\n        console.log(\"questions\", response.data);\r\n        setQuestions(response.data);\r\n        let randomNumber = getRandomIntExclusive(0, response.data.length - 1);\r\n        console.log(\"randomNumber\", randomNumber);\r\n        SetLabelSelected(response.data[randomNumber].question_text);\r\n        SetIdSelected(response.data[randomNumber].question_id);\r\n        console.log(\"id\", response.data[randomNumber].question_id);\r\n        setIsShowForm(true);\r\n        setAskMeAlert('Ask Me')\r\n      } else {\r\n        // SetLabelSelected();\r\n        setAskMeAlert('No question rigth now! try again later')\r\n        setDisableAskMe(true)\r\n      }\r\n    };\r\n    questionGrabber();\r\n\r\n    \r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-3\">\r\n      <button\r\n      id='ask-me'\r\n        type=\"button\"\r\n        className=\"btn btn-primary\"\r\n        onClick={() => handleAskMe()}\r\n        // disabled={disableAskMe}\r\n      >\r\n        {askMeAlert}\r\n      </button>\r\n      {isShowForm ? (\r\n        <form id=\"add-app\">\r\n          <div className=\"input-group mb-3\">\r\n            {questions.length ? (\r\n              <label htmlFor=\"name\">{labelSelected}</label>\r\n            ) : (\r\n              <div>Loading Question</div>\r\n            )}\r\n            <input\r\n              value={answer}\r\n              onChange={nameChange}\r\n              id=\"name\"\r\n              className=\"form-control\"\r\n              type=\"text\"\r\n            />\r\n          </div>\r\n          <button\r\n            type=\"submit\"\r\n            onClick={handleSubmitAnswer}\r\n            className=\"btn btn-primary\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </form>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuestionForm;\r\n","C:\\randomQuestionPERN\\client\\src\\apis\\AnswerQuestion.js",[],["33","34"],"C:\\randomQuestionPERN\\client\\src\\components\\ShowForm.js",["35","36","37","38","39"],{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":13,"column":10,"nodeType":"46","messageId":"47","endLine":13,"endColumn":22},{"ruleId":"44","severity":1,"message":"48","line":28,"column":11,"nodeType":"46","messageId":"47","endLine":28,"endColumn":25},{"ruleId":"40","replacedBy":"49"},{"ruleId":"42","replacedBy":"50"},{"ruleId":"51","severity":2,"message":"52","line":8,"column":12,"nodeType":"46","messageId":"53","endLine":8,"endColumn":21},{"ruleId":"51","severity":2,"message":"54","line":9,"column":36,"nodeType":"46","messageId":"53","endLine":9,"endColumn":49},{"ruleId":"51","severity":2,"message":"55","line":14,"column":20,"nodeType":"46","messageId":"53","endLine":14,"endColumn":26},{"ruleId":"51","severity":2,"message":"56","line":15,"column":23,"nodeType":"46","messageId":"53","endLine":15,"endColumn":33},{"ruleId":"51","severity":2,"message":"57","line":23,"column":20,"nodeType":"46","messageId":"53","endLine":23,"endColumn":38},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'disableAskMe' is assigned a value but never used.","Identifier","unusedVar","'updateQuestion' is assigned a value but never used.",["58"],["59"],"no-undef","'questions' is not defined.","undef","'labelSelected' is not defined.","'answer' is not defined.","'nameChange' is not defined.","'handleSubmitAnswer' is not defined.","no-global-assign","no-unsafe-negation"]